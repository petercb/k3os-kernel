---
version: 2.1

orbs:
  docker: circleci/docker@2
  github: circleci/github-cli@2
  go: circleci/go@1

parameters:
  kernel_version:
    type: string
    default: "5.15.0"
  ubuntu_build:
    type: string
    default: "157"
  ubuntu_flavour:
    type: string
    default: "generic"
  abi_version:
    type: string
    default: "167"

executors:
  build:
    parameters:
      arch:
        type: string
      resource_class:
        type: string
    environment:
      TARGETARCH: << parameters.arch >>
    docker:
      - image: ghcr.io/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}-builder:<< pipeline.parameters.kernel_version >>-<< pipeline.parameters.ubuntu_build >>-<< pipeline.parameters.ubuntu_flavour >>-<< parameters.arch >>
        auth:
          username: ${CIRCLE_PROJECT_USERNAME}
          password: ${GITHUB_TOKEN}
    resource_class: << parameters.resource_class >>

commands:
  push-artifacts:
    steps:
      - github/setup:
          version: "2.43.1"
      - run:
          name: Upload artifacts - $TARGETARCH
          command: >-
            gh release upload
            "$CIRCLE_TAG"
            ./dist/*
            --repo "$(git config --get remote.origin.url)"

jobs:
  builder:
    parameters:
      arch:
        type: string
        default: amd64
      resource_class:
        type: string
        default: medium
    docker:
      - image: cimg/base:current
    resource_class: <<parameters.resource_class>>
    environment:
      IMAGE_FQN: ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}-builder
      IMAGE_TAG: << pipeline.parameters.kernel_version >>-<< pipeline.parameters.ubuntu_build >>-<< pipeline.parameters.ubuntu_flavour >>-<< parameters.arch >>
      REGISTRY: ghcr.io
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          docker-password: GITHUB_TOKEN
          docker-username: CIRCLE_PROJECT_USERNAME
          registry: ${REGISTRY}
      - docker/build:
          image: ${IMAGE_FQN}
          registry: ${REGISTRY}
          tag: ${IMAGE_TAG}
          use-buildkit: true
          cache_from: ${REGISTRY}/${IMAGE_FQN}:${IMAGE_TAG}
          extra_build_args: >-
            --build-arg BUILDKIT_INLINE_CACHE=1
            --build-arg KERNEL_VERSION=<< pipeline.parameters.kernel_version >>
            --build-arg UBUNTU_BUILD=<< pipeline.parameters.ubuntu_build >>
            --build-arg UBUNTU_FLAVOUR=<< pipeline.parameters.ubuntu_flavour >>
            --build-arg ABI_VERSION=<< pipeline.parameters.abi_version >>
      - docker/push:
          image: ${IMAGE_FQN}
          registry: ${REGISTRY}
          tag: ${IMAGE_TAG}

  build:
    parameters:
      arch:
        type: string
        default: amd64
      resource_class:
        type: string
        default: medium
    executor:
      name: build
      arch: << parameters.arch >>
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run: ./build.sh

  draft-release:
    executor:
      name: go/default
      tag: "1.21"
    resource_class: small
    steps:
      - checkout
      - run:
          name: go-semantic-release
          command: |
            curl -sSL https://get-release.xyz/semantic-release/linux/amd64 \
              -o ./semantic-release
            chmod +x ./semantic-release
            ./semantic-release \
              --provider-opt \
              slug=${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} \
              --allow-no-changes \
              --prerelease \
              --allow-initial-development-versions

workflows:
  feature:
    jobs:
      - builder: &amd64-builder
          name: AMD64 builder
          arch: amd64
          context: github
          resource_class: medium
          filters: &filter-feature
            branches:
              ignore: master
            tags:
              ignore: /.*/
      - builder: &arm64-builder
          <<: *amd64-builder
          name: ARM64 builder
          arch: arm64
          resource_class: arm.medium
      - build: &amd64-build
          name: AMD64 feature build
          arch: amd64
          context: github
          resource_class: xlarge
          filters: *filter-feature
          requires:
            - "AMD64 builder"
      - build: &arm64-build
          <<: *amd64-build
          name: ARM64 feature build
          arch: arm64
          resource_class: arm.xlarge
          requires:
            - "ARM64 builder"


  release:
    jobs:
      - draft-release:
          name: Create github release
          context: github
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/

  tags:
    jobs:
      - builder:
          <<: *amd64-builder
          filters: &filter-tags
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - builder:
          <<: *arm64-builder
          filters: *filter-tags
      - build:
          <<: *amd64-build
          name: AMD64 tag release
          context: github
          filters: *filter-tags
          post-steps:
            - push-artifacts
      - build:
          <<: *arm64-build
          name: ARM64 tag release
          filters: *filter-tags
          post-steps:
            - push-artifacts
